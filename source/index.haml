%slides

  %slide.slide--contain.slide--position--bottom.slide--title(img="#{image_path('clouds.svg')}")
    .slide-content
      .middle.tac
        %h1.mbxs
          Thinking
          %b Modular CSS
        %p by <strong>Drew Barontini</strong> &mdash; @drewbarontini

  %slide.slide--fade(img="#{image_path('intro-danDenney.jpg')}")
    .slide-content
      .middle.tac
        %h2.h3 Dan Denney is a <em class="bdrbi">saint</em>.
      .bottom.right
        %p.oph.tss
          Photo Credit:
          %strong= link_to 'Nate Croft', 'https://www.flickr.com/photos/natecroft/', class: 'bdrbi tci'

  %slide.slide--fade(img="#{image_path('intro-2013.jpg')}")
    .slide-content
      .middle.tac
        %h2.h3 I <em class="bdrbi">love</em> this conference.
      .bottom.right
        %p.oph.tss
          Photo Credit:
          %strong= link_to 'Nate Croft', 'https://www.flickr.com/photos/natecroft/', class: 'bdrbi tci'

  %slide.slide--dark(img="#{image_path('intro-unimpressed.jpg')}")
    .slide-content
      .bottom
        %h2.h3 Drew is "<em class="bdrbi">unimpressed</em>".
        %p.oph.tss
          Photo Credit:
          %strong= link_to 'Nate Croft', 'https://www.flickr.com/photos/natecroft/', class: 'bdrbi tci'

  %slide.slide--contain.slide--position--bottom.slide--title(img="#{image_path('clouds.svg')}")
    .slide-content
      .middle.tac
        %h1.mbxs
          Thinking
          %b Modular CSS
        %p by <strong>Drew Barontini</strong> &mdash; @drewbarontini

  %slide
    .slide-content
      .middle.tac
        .bdrb.bdrt.pbs.pts
          %h2.h4
            Learn the <strong>"why"</strong> of modular CSS by analyzing the
            <em>decisions</em> that craft a flexible&nbsp;architecture.

  %slide
    .slide-content
      .middle.tac
        %h1.mbxs Agenda
        %ul.lr.tsl
          %li Define "Modular CSS"
          %li Explore the thought process
          %li Examples

  %slide
    .slide-content
      .middle.tac
        = image_tag 'me-v1.svg', alt: 'Drew Barontini Cartoon', width: '50%', class: 'mbs'

  %slide
    .slide-content
      .middle.tac
        = image_tag 'logo-cs.svg', alt: 'Code School', width: '300', class: 'mbm'
        %p Front-end Developer
        %h1.h2 Code School

  %slide(img="#{image_path('intro-office.jpg')}")

  %slide
    .slide-content
      .middle.tac
        %p.tsxl
          %strong Code School
          is an online platform for learning web&nbsp;technologies.

  %slide.slide--fade(img="#{image_path('intro-cs-courses.png')}")
    .slide-content
      .middle.tac
        %h2.h3 Ruby, iOS, Design, JavaScript, Ember, Node, Angular, Dart

  %slide
    .slide-content
      .middle.tac
        %h1.mbxs Responsibilities
        %ul.lr.tsl
          %li Front-end for the .com
          %li Our course engine
          %li Buildout of individual courses

  %slide.slide--fade(img="#{image_path('journey-journey.jpg')}")
    .slide-content
      .middle.tac
        %h1 The Journey

  %slide
    .slide-content
      .middle.tac
        = image_tag 'journey-band.jpg', alt: 'Band', class: 'slide-media'

  %slide.slide--fade.slide--fade--light(img="#{image_path('journey-jt.png')}")
    .slide-content
      .middle.tac
        %h1 MySpace

  %slide.slide--light
    .slide-content
      .middle.tac
        = image_tag 'journey-tshirt.png', alt: '', width: '800'

  %slide.slide--fade.slide--fade--dark(img="#{image_path('journey-cs.jpg')}")
    .slide-content
      .middle.tac
        %h1 Computer Science

  %slide.slide--success
    .slide-content
      .middle.tac
        %h1 Front-end Development

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %p.tsl.twb Front-end Development is a
        %h2.h1.shadowed.tci Specialization

  %slide(img="#{image_path('what-jesse.gif')}")

  %slide.slide--contain.slide--dark(img="#{image_path('css.gif')}")

  %slide
    .slide-content
      .middle.tac
        %h2.tsh4 Front-end Developer &amp; Designer

  %slide.noTransition
    .slide-content
      .middle.tac
        %h2.tsh4
          Front-end Developer
          %span.tcs.tds &amp; Designer

  %slide(img="#{image_path('journey-excited.gif')}")

  %slide.slide--warning
    .slide-content
      .middle.tac
        %h2.h3 Developers Respect Our CSS
        %p.tsl (mostly)

  %slide
    .slide-content
      .middle.tac
        %h2.tsh4
          HTML &amp; CSS are easy to write,
          %b but hard to write <em>well</em>.

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %p.tsl.twb We're building
        %h1.tsh2.shadowed.tci Complex Systems

  %slide
    .slide-content
      .middle.tac
        %h2.tsh4
          Ability for styles to flex and
          %b work in different <em>environments</em>.

  %slide.slide--title
    .slide-content
      .middle.tac
        %h1 Modular CSS

  %slide
    .slide-content
      .middle
        %blockquote.tsl
          "<strong>Modular design</strong> is an approach that subdivides a system into smaller
          parts that can be independently created and then used in different
          systems to drive multiple functionalities."

  %slide
    .slide-content
      .middle.tac
        %h2.mbxs tl;dr
        %ul.lr.tsl
          %li Smaller parts
          %li Independently created
          %li Used in different systems

  %slide.slide--success
    .slide-content
      .middle.tac
        %h2.tsh4
          Breaking your CSS down into <em>smaller chunks</em> will ultimately result in
          more <em>maintainable code</em>.

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .thumb {
            border-radius: 50%;
            display: block;
          }

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %p.tsl.twb A small set of
        %h2.h1.shadowed.tci Extendable
        %p.tsl.twb styles

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.h1.shadowed.tci Single Responsibility Principle

  %slide
    .slide-content
      .middle
        %blockquote.tsl
          "The <strong>single responsibility principle</strong> states that every class should
          have a single responsibility, and that responsibility should be
          entirely encapsulated by the class."

  %slide
    .slide-content
      .middle.middle--auto
        :code
          # lang: css

          .list {
            list-style-type: none;
            margin: 0;
            padding: 0;
          }

          .list-item {
            display: block;
            margin-bottom: 1em;
          }
          .list-item:last-child {
            margin-bottom: 0;
          }

  %slide
    .slide-content
      .middle.tac
        %h2.h3
          A list module that <em>only</em> handles text lists.

  %slide
    .slide-content
      .middle.tac
        %h2.tsh4
          "...<em>encapsulated</em> by the class."

  %slide
    .slide-content
      .middle.tac
        = image_tag 'encapsulation-header.png', alt: ''

  %slide.noTransition
    .slide-content
      .middle.tac
        = image_tag 'encapsulation-header-valign.png', alt: ''

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: html

          <header class="header">
            <nav class="nav">
              <!--- ... --->
            </nav>
          </header>

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .nav {
            margin-top: 20px;
          }

  %slide
    .slide-content
      .middle.tac
        %h2.tsh4
          What if we want don't every
          %b
            <code class="twn">.nav</code> to have this
            <code class="twn">margin-top</code>?

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .header .nav {
            margin-top: 20px;
          }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: html

          <header class="header">
            <nav class="header-nav nav">
              <!--- ... --->
            </nav>
          </header>

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .header-nav {
            margin-top: 20px;
          }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .valign {
            position: relative;
            top: 50%;
            transform: translateY(-50%);
          }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: html

          <header class="header">
            <nav class="nav valign">
              <!--- ... --->
            </nav>
          </header>

  %slide.slide--warning
    .slide-content
      .middle.tac
        %h2.tsh4
          <em>Positioning</em> and <em>layout</em> are constant
          %b struggles with modular CSS.

  %slide.slide--success
    .slide-content
      .middle.tac
        %h2.tsh4
          Abstract <em>positioning</em> and <em>layout</em>
          %b from your modules to increase their flexibility.

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.shadowed.tci Classes

  %slide.slide--error
    .slide-content
      .middle.tac
        %h2.tsh4
          IDs are <em>too specific</em>, and they'll cause you headaches.

  %slide.slide--success
    .slide-content
      .middle.tac
        %h2.tsh4
          Classes <span class="bdrbi">flatten</span> the specificity.

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: html

          <header class="header">
            <!--- ... --->
          </header>

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.shadowed.tci Establish Naming Conventions

  %slide
    .slide-content
      .middle.tac
        %h2.h3.mbxs camelCase &amp; Hyphens
        %ul.lr.tsl
          %li
            %code .list
          %li
            %code .tabList
          %li
            %code .list-item
          %li
            %code .tabList-item

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h2.h1.shadowed.tci Modifiers

  %slide
    .slide-content
      .middle.tac
        %h2.h3
          A modifier is an <em>alternate</em>
          %b set of styling on a module.

  %slide
    .slide-content
      .middle.tac
        = image_tag 'conventions-modifier.png', alt: 'Buttons'

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .btn {
            background: #292b2f;
            color: white;
            display: inline-block;
            line-height: 2.5;
            padding: 0 1em;
          }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .element--modifier {}

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .btn--b {
            background: #9b9b9b;
            color: black;
          }

  %slide
    .slide-content
      .middle.middle--auto
        :code
          # lang: html

          <a href="#" class="btn">Button</a>
          <a href="#" class="btn btn--b">Button B</a>

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h2.h1.shadowed.tci States

  %slide
    .slide-content
      .middle.tac
        %h3
          Hooks added <em>conditionally</em>
          %b via JavaScript.

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .is-state {}

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .dropdown {
            display: none;
          }

          .dropdown.is-active {
            display: block;
          }

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h2.h1.shadowed.tci Context

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %p.tsl.twb Upholds
        %h3.h1.shadowed.tci Encapsulation

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .has-context {}

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .has-dropdown {
            position: relative;
          }

  %slide
    .slide-content
      .middle.middle--auto
        :code
          # lang: html

          <div class="container has-dropdown">
            <div class="dropdown">
              <!-- ... -->
            </div>
          </div>

  %slide
    .slide-content
      %h1.h2.mbxs Inspiration from:
      %ul.tsl
        %li OOCSS
        %li BEM
        %li Suit
        %li SMACSS

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.shadowed.tci Limit Nesting

  %slide.slide--warning
    .slide-content
      .middle.tac
        %p.tsl
          This tenet applies specifically to CSS preprocessors, like
          <strong>Sass</strong> and <strong>LESS</strong>, that allow you to
          nest your selectors.

  %slide.slide--error
    .slide-content
      .middle.tac
        %p.tsh4
          Although nesting is an attractive
          %b.twn feature, <span class="bdrbi">be careful</span> when using it.

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.shadowed.tci Magic Numbers

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .element {
            position: relative;
            top: -2px;
          }

  %slide
    .slide-content
      .middle.middle--auto
        :code
          # lang: css

          .element {
            position: relative;
            top: -2px; /* FIXME: Magic number! */
          }

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.shadowed.tci Abstract Structure

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .nav {
            float: right;
            width: 50%;
          }

  %slide
    .slide-content
      .middle.tac
        %h3.tsh4
          <em>Why</em> is this navigation block being
          %b positioned to the right at <code>50%</code>?

  %slide
    .slide-content
      .middle.tac
        %h3.tsh4
          \... because it's in <em>another module</em>?

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h2.h1.shadowed.tci Abstract Up

  %slide
    .slide-content
      .middle.middle--auto
        :code
          # lang: html

          <div class="grid">
            <div class="grid-box grid-box--1of2">
              <!--- ... --->
            </div>
            <div class="grid-box grid-box--1of2">
              <nav class="nav">
                <!--- ... --->
              </nav>
            </div>
          </div>

  %slide
    .slide-content
      .middle.tac
        %h2.h3
          A <em>higher-level module</em> now
          %b handles the structure.

  %slide.slide--title
    .slide-content
      .middle.tac
        %h1.tsh2 Exploring Why

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.shadowed.tci Process

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.shadowed.tci 5 Steps

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.shadowed.tci 1. Identify

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.shadowed.tci 2. Define

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.shadowed.tci 3. Build

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.shadowed.tci 4. Combine

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h1.shadowed.tci 5. Refine

