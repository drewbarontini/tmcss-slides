%slides

  %slide.slide--contain.slide--dark(img="http://gificiency.com/m/buffering-elephant.jpg")

  %slide.slide--title
    .slide-content
      .middle.tac
        %h1
          Thinking
          %b Modular CSS
        %p.mbf by <strong>Drew Barontini</strong> &mdash; @drewbarontini

  %slide.slide--fade(img="#{image_path('intro-danDenney.jpg')}")
    .slide-content
      .middle.tac
        %h2.h3 Dan Denney is a <em class="bdrbi">saint</em>.
      .bottom.right
        %p.oph.tss
          Photo Credit:
          %strong= link_to 'Nate Croft', 'https://www.flickr.com/photos/natecroft/', class: 'bdrbi tci'

  %slide.slide--fade(img="#{image_path('intro-2013.jpg')}")
    .slide-content
      .middle.tac
        %h2.h3 I <em class="bdrbi">love</em> this conference.
      .bottom.right
        %p.oph.tss
          Photo Credit:
          %strong= link_to 'Nate Croft', 'https://www.flickr.com/photos/natecroft/', class: 'bdrbi tci'

  %slide.slide--dark(img="#{image_path('intro-unimpressed.jpg')}")
    .slide-content
      .bottom
        %h2.h3 Drew is "<em class="bdrbi">unimpressed</em>".
        %p.oph.tss
          Photo Credit:
          %strong= link_to 'Nate Croft', 'https://www.flickr.com/photos/natecroft/', class: 'bdrbi tci'

  %slide.slide--title
    .slide-content
      .middle.tac
        %h1
          Thinking
          %b Modular CSS
        %p.mbf by <strong>Drew Barontini</strong> &mdash; @drewbarontini

  %slide
    .slide-content
      .middle.tac
        .bdrb.bdrt.pbs.pts
          %h2.h4.mbf
            Learn the <strong>"why"</strong> of modular CSS by analyzing the
            <em>decisions</em> that craft a flexible&nbsp;architecture.

  %slide
    .slide-content
      .middle.tac
        %h1 Agenda
        %ul.lr.tsl
          %li Define "Modular CSS"
          %li Explore the thought process
          %li Examples

  %slide
    .slide-content
      .middle.tac
        = image_tag 'me-v1.svg', alt: 'Drew Barontini Cartoon', width: '50%', class: 'mbs'

  %slide
    .slide-content
      .middle.tac
        = image_tag 'logo-cs.svg', alt: 'Code School', width: '300', class: 'mbm'
        %p.mbf Front-end Developer
        %h1.h2.mbf Code School

  %slide(img="#{image_path('intro-office.jpg')}")

  %slide
    .slide-content
      .middle.tac
        %p.mbf.tsxl
          %strong Code School
          is an online platform for learning web technologies.

  %slide.slide--fade(img="#{image_path('intro-cs-courses.png')}")
    .slide-content
      .middle.tac
        %h2.h3 Ruby, iOS, Design, JavaScript, Ember, Node, Angular, Dart

  %slide
    .slide-content
      .middle.tac
        %h1 Responsibilities
        %ul.lr.mbf.tsl
          %li Front-end for the .com
          %li Our course engine
          %li Buildout of individual courses

  %slide.slide--fade(img="#{image_path('journey-journey.jpg')}")
    .slide-content
      .middle.tac
        %h1.mbf The Journey

  %slide
    .slide-content
      .middle.tac
        = image_tag 'journey-band.jpg', alt: 'Band', class: 'slide-media'

  %slide.slide--fade.slide--fade--light(img="#{image_path('journey-jt.png')}")
    .slide-content
      .middle.tac
        %h1 MySpace?

  %slide
    .slide-content
      .middle.tac
        = image_tag 'journey-tshirt.png', alt: '', class: 'slide-media', width: '800'

  %slide.slide--fade.slide--fade--dark(img="#{image_path('journey-cs.jpg')}")
    .slide-content
      .middle.tac
        %h1.mbf.tsh2 Computer Science
        %p.tsl
          %em There is no spoon.

  %slide.slide--success
    .slide-content
      .middle.tac
        %h1.h2 Front-end Development

  %slide
    .slide-content
      .middle.tac
        %h2 It's a specialization.

  %slide(img="#{image_path('what-jesse.gif')}")

  %slide.slide--contain.slide--dark(img="#{image_path('css.gif')}")

  %slide
    .slide-content
      .middle.tac
        %h2.h3 Front-end Developer &amp; Designer

  %slide.noTransition
    .slide-content
      .middle.tac
        %h2.h3
          Front-end Developer
          %span.tcs.tds &amp; Designer

  %slide(img="#{image_path('journey-excited.gif')}")

  %slide.slide--warning
    .slide-content
      .middle.tac
        %h2.h3.mbf Developers Respect Our CSS
        %p.mbf.tsl (mostly)

  %slide
    .slide-content
      .middle.tac
        %h2.h3.mbf
          HTML &amp; CSS are easy to write,
          %b but hard to write <em>well</em>.

  %slide
    .slide-content
      .middle.tac
        %h2.h3.mbf
          We're building complex
          %b <em>systems</em> now.

  %slide
    .slide-content
      .middle.tac
        %h2.h3.mbf
          Ability for styles to flex and work in different <em>environments</em>.

  %slide.slide--title
    .slide-content
      .middle.tac
        %h1 Modular CSS

  %slide
    .slide-content
      .middle
        %blockquote
          "<strong>Modular design</strong> is an approach that subdivides a system into smaller
          parts that can be independently created and then used in different
          systems to drive multiple functionalities."

  %slide
    .slide-content
      .middle.tac
        %h2 tl;dr
        %ul.lr.tsl
          %li Smaller parts
          %li Independently created
          %li Used in different systems

  %slide.slide--success
    .slide-content
      .middle.tac
        %h2.h3.mbf
          Breaking your CSS down into <em>smaller chunks</em> will ultimately result in
          more <em>maintainable code</em>.

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .thumb {
              border-radius: 50%;
              display: block;
            }

  %slide
    .slide-content
      .middle.tac
        %h2.mbf
          A <em>small</em> set of extendable styles.

  %slide
    .slide-content
      .middle.tac
        %h1.mbf Single Responsibility Principle

  %slide
    .slide-content
      .middle
        %blockquote
          "The <strong>single responsibility principle</strong> states that every class should
          have a single responsibility, and that responsibility should be
          entirely encapsulated by the class."

  %slide
    .slide-content
      .middle.middle--auto
        - code('css') do
          :plain
            .list {
              list-style-type: none;
              margin: 0;
              padding: 0;
            }

            .list-item {
              display: block;
              margin-bottom: 1em;
            }
            .list-item:last-child {
              margin-bottom: 0;
            }

  %slide
    .slide-content
      .middle.tac
        %h2.h2.mbf
          A list module that <em>only</em> handles text lists.

  %slide
    .slide-content
      .middle.tac
        %h2.h3.mbf
          "...<em>encapsulated</em> by the class."

  %slide
    .slide-content
      .middle.tac
        = image_tag 'encapsulation-header.png', alt: ''

  %slide.noTransition
    .slide-content
      .middle.tac
        = image_tag 'encapsulation-header-valign.png', alt: ''

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('html') do
          :plain
            <header class="header">
              <nav class="nav">
                <!--- ... --->
              </nav>
            </header>

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .nav {
              margin-top: 20px;
            }

  %slide
    .slide-content
      .middle.tac
        %h2.tsh3
          What if we want don't every <code class="twn">.nav</code> to have
          this <code class="twn">margin-top</code>?

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .header .nav {
              margin-top: 20px;
            }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('html') do
          :plain
            <header class="header">
              <nav class="header-nav nav">
                <!--- ... --->
              </nav>
            </header>

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .header-nav {
              margin-top: 20px;
            }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .valign {
              transform: translateY(-50%);
              position: relative;
              top: 50%;
            }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('html') do
          :plain
            <header class="header">
              <nav class="nav valign">
                <!--- ... --->
              </nav>
            </header>

  %slide.slide--warning
    .slide-content
      .middle.tac
        %h2.tsh4.mbf
          <em>Positioning</em> and <em>layout</em> are constant struggles with
          modular CSS.

  %slide.slide--success
    .slide-content
      .middle.tac
        %h2.tsh3.mbf
          Abstract <em>positioning</em> and <em>layout</em> from your modules
          to increase their flexibility.

  %slide
    .slide-content
      .middle.tac
        %h1.mbf Classes

  %slide.slide--error
    .slide-content
      .middle.tac
        %h2.h3.mbf
          IDs are <em>too specific</em>, and they'll cause you headaches.

  %slide.slide--success
    .slide-content
      .middle.tac
        %h2.h3.mbf
          Classes <em>flatten</em> the specificity.

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('html') do
          :plain
            <header class="header">
              <!--- ... --->
            </header>

  %slide
    .slide-content
      .middle.tac
        %h1.mbf Establish Naming Conventions

  %slide
    .slide-content
      .middle.tac
        %h2.h3 camelCase &amp; Hyphens
        %ul.lr.tsl
          %li
            %code .list
          %li
            %code .tabList
          %li
            %code .list-item
          %li
            %code .tabList-item

  %slide
    .slide-content
      .middle.tac
        %h2.h1 Modifiers

  %slide
    .slide-content
      .middle.tac
        %h2.h3
          A modifier is an <em>alternate</em> set of styling on a module.

  %slide
    .slide-content
      .middle.tac
        = image_tag 'conventions-modifier.png', alt: 'Buttons'

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .btn {
              background: #292b2f;
              color: white;
              display: inline-block;
              line-height: 2.5;
              padding: 0 1em;
            }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .element--modifier {}

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .btn--b {
              background: #9b9b9b;
              color: black;
            }

  %slide
    .slide-content
      .middle.middle--auto
        - code('html') do
          :plain
            <a href="#" class="btn">Button</a>
            <a href="#" class="btn btn--b">Button B</a>

  %slide
    .slide-content
      .middle.tac
        %h2.h1 States

  %slide
    .slide-content
      .middle.tac
        %h3.mbf
          Hooks added <em>conditionally</em>
          %b via JavaScript.

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .is-state {}

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .dropdown {
              display: none;
            }

            .dropdown.is-active {
              display: block;
            }

  %slide
    .slide-content
      .middle.tac
        %h2.h1 Context

  %slide
    .slide-content
      .middle.tac
        %h3.h2.mbf
          Upholds <em>encapsulation</em>.

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .has-context {}

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .has-dropdown {
              position: relative;
            }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('html') do
          :plain
            <div class="container has-dropdown">
              <div class="dropdown">
                <!-- ... -->
              </div>
            </div>

  %slide
    .slide-content
      %h1.h2
        Inspiration from:
      %ul.tsl
        %li OOCSS
        %li BEM
        %li Suit
        %li SMACSS

  %slide
    .slide-content
      .middle.tac
        %h1 Avoid Nesting

  %slide.slide--warning
    .slide-content
      .middle.tac
        %p.tsh4
          This tenet applies specifically to CSS preprocessors, like
          <strong>Sass</strong> and <strong>LESS</strong>, that allow you to
          nest your selectors.

  %slide.slide--error
    .slide-content
      .middle.tac
        %p.tsh3
          Although nesting is an attractive feature, be careful when using it.

  %slide
    .slide-content
      .middle.tac
        %h1.tsh2 Avoid "Magic Numbers"

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .element {
              position: relative;
              top: -2px;
            }

  %slide
    .slide-content
      .middle.middle--auto
        - code('css') do
          :plain
            .element {
              position: relative;
              top: -2px; /* FIXME: Magic number! */
            }

  %slide
    .slide-content
      .middle.tac
        %h1 Abstract Structure
        %p Layout, Positioning

  %slide
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .nav {
              float: right;
              width: 50%;
            }

  %slide
    .slide-content
      .middle.tac
        %h3.tsh4
          <em>Why</em> is this navigation block being positioned to the right
          at <code>50%</code>?

  %slide
    .slide-content
      .middle.tac
        %h3.tsh4
          \... because it's in <em>another module</em>?

  %slide
    .slide-content
      .middle.tac
        %h2.h1 Abstract Up

  %slide
    .slide-content
      .middle.middle--auto
        - code('html') do
          :plain
            <div class="grid">
              <div class="grid-box grid-box--1of2">
                <!--- ... --->
              </div>
              <div class="grid-box grid-box--1of2">
                <nav class="nav">
                  <!--- ... --->
                </nav>
              </div>
            </div>

  %slide
    .slide-content
      .middle.tac
        %h2.h3
          A <em>higher-level module</em> now handles the structure.

