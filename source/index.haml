%slides

  %slide.slide--contain.slide--position--bottom.slide--title(img="#{image_path('clouds.svg')}")
    .slide-content
      .middle.tac
        %h1.mbm
          %span.oph.tss Thinking
          %b Modular CSS

  %slide.slide--fade(img="#{image_path('intro-danDenney.jpg')}")
    .slide-content
      .middle.tac
        %h2.h3 Dan Denney is a <em class="bdrbi">saint</em>.
      .bottom.right
        %p.oph.tss
          Photo Credit:
          %strong= link_to 'Nate Croft', 'https://www.flickr.com/photos/natecroft/', class: 'bdrbi tci'

  %slide.slide--fade(img="#{image_path('intro-2013.jpg')}")
    .slide-content
      .middle.tac
        %h2.h3 I <em class="bdrbi">love</em> this conference.
      .bottom.right
        %p.oph.tss
          Photo Credit:
          %strong= link_to 'Nate Croft', 'https://www.flickr.com/photos/natecroft/', class: 'bdrbi tci'

  %slide.slide--fade(img="#{image_path('intro-unimpressed.jpg')}")
    .slide-content
      .bottom
        %h2.h3 Drew is "<em class="bdrbi">unimpressed</em>"
        %p.oph.tss
          Photo Credit:
          %strong= link_to 'Nate Croft', 'https://www.flickr.com/photos/natecroft/', class: 'bdrbi tci'

  %slide.slide--contain.slide--position--bottom.slide--title(img="#{image_path('clouds.svg')}")
    .slide-content
      .middle.tac
        %h1.mbm
          %span.oph.tss Thinking
          %b Modular CSS

  %slide
    .slide-content
      .middle.tac
        .bdrb.bdrt.pbs.pts
          %h2.h4
            Learn the <strong>"why"</strong> of modular CSS by analyzing the
            <em>decisions</em> that craft a flexible&nbsp;architecture.

  %slide
    .slide-content
      .middle.tac
        %h1.mbxs Agenda
        %ul.lr.tsl
          %li Define "Modular CSS"
          %li Explore the thought process
          %li Examples

  %slide
    .slide-content
      .middle.tac
        = image_tag 'me.jpg', alt: 'Drew Barontini', class: 'slide-img mbm'
        %h2.tsl Drew Barontini
        %p @drewbarontini

  %slide
    .slide-content
      .middle.tac
        = image_tag 'logo-cs.svg', alt: 'Code School', width: '300', class: 'mbm'
        %p Front-end Developer
        %h1.h2 Code School

  %slide.slide--translateY(img="#{image_path('intro-office-01.jpg')}")
    .slide-content
      .bottom
        .card.card--dark
          %p.tci GAI Building &mdash; Orlando, FL

  %slide(img="#{image_path('intro-office-02.jpg')}")

  %slide.slide--translateY(img="#{image_path('intro-epcot-01.jpg')}")
    .slide-content
      .bottom
        .card.card--dark
          %p.tci Epcot Food &amp; Wine Festival

  %slide(img="#{image_path('intro-epcot-02.jpg')}")
  %slide(img="#{image_path('intro-epcot-03.jpg')}")

  %slide.slide--translateY(img="#{image_path('intro-whirlyball.jpg')}")
    .slide-content
      .bottom
        .card.card--dark
          %p.tci WhirlyBall

  %slide.slide--translateY(img="#{image_path('intro-magic.jpg')}")
    .slide-content
      .bottom
        .card.card--dark
          %p.tci Orlando Magic Game

  %slide.slide--scale
    .slide-content
      .middle.tac
        = image_tag 'logo-cs.svg', alt: 'Code School', width: '300', class: 'mbm'

  %slide
    .slide-content
      .middle.tac
        %p.tsl.twl
          %strong Code School
          is an online platform
          %span.db for learning web technologies.

  %slide.slide--fade(img="#{image_path('intro-csCourses.png')}")
    .slide-content
      .middle.tac
        %h2.h3 Ruby, Rails, Sass, Git, Angular, iOS, jQuery

  %slide
    .slide-content
      .middle.tac
        %h1.mbxs Responsibilities
        %ul.lr.tsl
          %li Front-end for the .com
          %li Our course engine
          %li Buildout of individual courses

  %slide.slide--fade(img="#{image_path('journey-journey.jpg')}")
    .slide-content
      .middle.tac
        %h1 The Journey

  %slide.slide--contain.slide--video(img="#{image_path('journey-band.jpg')}")
    .slide-content

  %slide.slide--fade.slide--translateY(img="#{image_path('journey-myspace.jpg')}")
    .slide-content
      .bottom
        %h1 MySpace

  %slide(img="#{image_path('sad-sansa.gif')}")

  %slide.slide--light
    .slide-content
      .middle.tac
        = image_tag 'journey-tshirt.png', alt: '', width: '800'

  %slide.slide--fade.slide--fade--dark(img="#{image_path('journey-cs.jpg')}")
    .slide-content
      .middle.tac
        %h1 Computer Science

  %slide
    .slide-content
      .middle.tac
        = image_tag 'intro-circles.png', alt: ''

  %slide.slide--success
    .slide-content
      .middle.tac
        %h1 Front-end Development

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %p.tsl.twb Front-end Development is a
        %h2.h1.shadowed.tci Specialization

  %slide
    .slide-content
      .middle.tac
        %h3.h4
          Itâ€™s an area of focus for <strong>unique</strong>
          %span.db <strong>individuals</strong> with <em>particular</em> skills.

  %slide(img="#{image_path('what-jesse.gif')}")

  %slide.slide--contain.slide--dark(img="#{image_path('css.gif')}")

  %slide
    .slide-content
      .middle.tac
        %h2.tsh4 Front-end Developer &amp; Designer

  %slide.noTransition
    .slide-content
      .middle.tac
        %h2.tsh4
          Front-end Developer
          %span.tcs.tds &amp; Designer

  %slide(img="#{image_path('journey-excited.gif')}")

  %slide.slide--warning
    .slide-content
      .middle.tac
        %h2.h3 Developers Respect Our CSS
        %p.tsl (mostly)

  %slide
    .slide-content
      .bottom
        %blockquote.mbs
          "<strong>HTML</strong> and <strong>CSS</strong> are so easy, any of us
          can write it."
        %p
          &mdash; <strong>Joe Developer</strong>,
          %em Sweeping Generalist

  %slide
    .slide-content
      .middle.tac
        %h2.h4
          <strong>HTML &amp; CSS</strong> are easy to write,
          %span.db but hard to write <em>well</em>.

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %p.tsl.twb We're building
        %h1.tsh2.shadowed.tci Complex Systems

  %slide
    .slide-content
      .middle.tac
        %h2.h4
          Ability for styles to <strong>flex</strong> and
          %span.db work in different <em>environments</em>.

  %slide.slide--contain.slide--position--bottom.slide--title(img="#{image_path('clouds.svg')}")
    .slide-content
      .middle.tac
        %h1.mbm Modular CSS

  %slide.slide--error.slide--translateX
    .slide-content
      .middle.tac
        = image_tag 'define-pages.svg', alt: 'Pages', class: 'db mhc', width: '40%'

  %slide.slide--success.slide--translateX
    .slide-content
      .middle.tac
        = image_tag 'define-components.svg', alt: 'Components', class: 'db mhc', width: '40%'

  %slide
    .slide-content
      .bottom
        %blockquote.mbxs.tsl
          "Focusing on creating healthy front-end modules instead of complete
          pages can help break complex page layouts into <strong>reusable
          solutions</strong>."
        %p
          &mdash;
          %strong Dave Rupert

  %slide
    .slide-content
      .middle.tac
        %blockquote.mbxs.tsl
          "Tiny Bootstraps, for Every Client"
        %p
          &mdash;
          %strong Dave Rupert

  %slide
    .slide-content
      .middle
        %blockquote.tsl
          "<strong>Modular design</strong> is an approach that subdivides a system into smaller
          parts that can be independently created and then used in different
          systems to drive multiple functionalities."

  %slide
    .slide-content
      .middle.tac
        %h2.mbxs tl;dr
        %ul.lr.tsl
          %li Smaller parts
          %li Independently created
          %li Used in different systems

  %slide.slide--success
    .slide-content
      .middle.tac
        %h2.h4
          Breaking your CSS down into <em>smaller chunks</em> will ultimately result in
          more <em>maintainable code</em>.

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .thumb {
            border-radius: 50%;
            display: block;
          }

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %p.tsl.twb A small set of
        %h2.h1.shadowed.tci Extendable
        %p.tsl.twb styles

  %slide.slide--subdue.slide--translateY
    .slide-content
      .bottom
        %h1.h1.shadowed.tci Single Responsibility Principle

  %slide
    .slide-content
      .middle
        %blockquote.tsl
          "The <strong>single responsibility principle</strong> states that
          every class should have a <em>single responsibility</em>, and that
          responsibility should be entirely <em>encapsulated</em> by the
          class."

  %slide
    .slide-content
      .middle.middle--auto
        :code
          # lang: sass

          // *************************************
          //
          //   Cell
          //   -> Width-limiting blocks
          //
          // *************************************

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .cell {
            margin: 0 auto;
            max-width: 900px;
          }

  %slide
    .slide-content
      .middle.tac
        %h2.twl.tsh3
          A module that <em>only</em>
          %span.db handles width limiting.

  %slide
    .slide-content
      .middle.tac
        %h2.h4
          "...<em>encapsulated</em> by the class."

  %slide
    .slide-content
      .middle.tac
        = image_tag 'encapsulation-header.png', alt: ''

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: html

          <header class="header">
            <nav class="nav">
              <!--- ... --->
            </nav>
          </header>

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .nav {
            float: right;
          }

  %slide
    .slide-content
      .middle.tac
        %h2.h4
          What if we don't want <em>every</em>
          %span.db
            <code class="twn">.nav</code> to be floated right?

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .header .nav {
            float: right;
          }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .header-nav {
            float: right;
          }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: html

          <header class="header">
            <nav class="header-nav nav">
              <!--- ... --->
            </nav>
          </header>

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .fr {
            float: right;
          }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: html

          <header class="header">
            <nav class="nav fr">
              <!--- ... --->
            </nav>
          </header>

  %slide.slide--warning
    .slide-content
      .middle.tac
        %h2.h4
          <em>Positioning</em> and <em>layout</em> are constant
          %span.db struggles with modular CSS.

  %slide.slide--success
    .slide-content
      .middle.tac
        %h2.tsxl.twl
          Abstract <em>positioning</em> and <em>layout</em>
          %span.db from your modules to increase their flexibility.

  %slide.slide--subdue.slide--translateY
    .slide-content
      .bottom
        %h1.shadowed.tci Classes

  %slide.slide--error
    .slide-content
      .middle.tac
        %h2.tsh3.twl
          IDs are <em>too specific</em>, and
          %span.db they'll cause you headaches.

  %slide.slide--success
    .slide-content
      .middle.tac
        %h2.h4
          Classes <strong class="bdrbi">flatten</strong> the specificity.

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: html

          <table class="table">
            <!--- ... --->
          </table>

  %slide.slide--subdue.slide--translateY
    .slide-content
      .bottom
        %h1.shadowed.tci Establish Naming Conventions

  %slide
    .slide-content
      .middle.tac
        %blockquote.mbxs.tsxl
          "This is how it is <em>now</em>,
          %span.db until we change it."
        %p.twb &mdash; Nick Walsh

  %slide.slide--warning
    .slide-content
      .middle.tac
        %p.tsxl.tsi
          * This is by no way
          %span.db preaching our method.

  %slide
    .slide-content
      .middle
        = image_tag 'logo-mvcss.svg', alt: 'MVCSS', width: '40%', height: '40%', class: 'db mhc'

  %slide
    .slide-content
      .middle.tac
        %h2.h3.mbxs camelCase &amp; Hyphens
        %ul.lr.tsl
          %li
            %code .list
          %li
            %code .tabList
          %li
            %code .list-item
          %li
            %code .tabList-item

  %slide.slide--subdue.slide--translateY
    .slide-content
      .bottom
        %h2.h1.shadowed.tci Modifiers

  %slide
    .slide-content
      .middle.tac
        %h2.tsh3.twl
          A modifier is an <em>alternate</em>
          %span.db set of styling on a module.

  %slide.slide--scale
    .slide-content
      .middle.tac
        = image_tag 'conventions-modifier.png', alt: 'Buttons'

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .btn {
            background: #292b2f;
            color: white;
            display: inline-block;
            line-height: 2.5;
            padding: 0 1em;
          }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .element--modifier {}

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .btn--b {
            background: #9b9b9b;
            color: black;
          }

  %slide
    .slide-content
      .middle.middle--auto
        :code
          # lang: html

          <a href="#" class="btn">Button</a>
          <a href="#" class="btn btn--b">Button B</a>

  %slide.slide--subdue.slide--translateY
    .slide-content
      .bottom
        %h2.h1.shadowed.tci States

  %slide
    .slide-content
      .middle.tac
        %h3.twl
          Hooks added <em>conditionally</em>
          %span.db via JavaScript.

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .is-state {}

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .dropdown {
            display: none;
          }

          .dropdown.is-active {
            display: block;
          }

  %slide.slide--subdue.slide--translateY
    .slide-content
      .bottom
        %h2.h1.shadowed.tci Context

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %p.tsl.twb Upholds
        %h3.h1.shadowed.tci Encapsulation

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .has-context {}

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .has-dropdown {
            position: relative;
          }

  %slide
    .slide-content
      .middle.middle--auto
        :code
          # lang: html

          <div class="container has-dropdown">
            <div class="dropdown">
              <!-- ... -->
            </div>
          </div>

  %slide
    .slide-content
      %h1.h2.mbxs Inspiration from:
      .grid
        .grid-box.grid-box--1of3
          %ul.tsl
            %li OOCSS
            %li BEM
            %li Suit
        .grid-box.grid-box--1of3
          %ul.tsl
            %li SMACSS
            %li inuit.css

  %slide.slide--subdue.slide--translateY
    .slide-content
      .bottom
        %h1.shadowed.tci Limit Nesting

  %slide.slide--warning
    .slide-content
      .middle.tac
        %p.tsl.twl
          This tenet applies specifically to CSS preprocessors, like
          <strong>Sass</strong> and <strong>LESS</strong>, that allow you to
          nest your selectors.

  %slide.slide--error
    .slide-content
      .middle.tac
        %p.tsh4.twl
          Although nesting is an attractive
          %span.db feature, <strong class="bdrbi">be careful</strong> when using it.

  %slide
    .slide-content
      .middle.middle--auto
        :code
          # lang: scss

          section.content {
            .header {
              // ...
            }
            .main {
              // ...
            }
            .footer {
              // ...
            }
          }

  %slide.slide--subdue.slide--translateY
    .slide-content
      .bottom
        %h1.shadowed.tci Magic Numbers

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .element {
            position: relative;
            top: -2px;
          }

  %slide
    .slide-content
      .middle.middle--auto
        :code
          # lang: css

          .element {
            position: relative;
            top: -2px; /* FIXME: Magic number! */
          }

  %slide.slide--subdue.slide--translateY
    .slide-content
      .bottom
        %h1.shadowed.tci Abstract Structure

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .nav {
            float: right;
            width: 50%;
          }

  %slide
    .slide-content
      .middle.tac
        %h3.h4
          <em>Why</em> is this navigation block being
          %span.db positioned to the right at <code>50%</code>?

  %slide
    .slide-content
      .middle.tac
        %h3.h4
          \... because it's in <em>another module</em>?

  %slide.slide--subdue
    .slide-content
      .middle.tac
        %h2.h1.shadowed.tci Abstract Up

  %slide
    .slide-content
      .middle.middle--auto
        :code
          # lang: html

          <div class="grid">
            <div class="grid-box grid-box--1of2">
              <!--- ... --->
            </div>
            <div class="grid-box grid-box--1of2">
              <nav class="nav">
                <!--- ... --->
              </nav>
            </div>
          </div>

  %slide
    .slide-content
      .middle.tac
        %h2.tsh3.twl
          A <em>higher-level module</em> now
          %span.db handles the structure.

  %slide
    .slide-content
      .middle.tac
        %h1.mbs
          %span.tfb.tsxs.ttn.twn Evolution <em>of</em>
          %span.db Modular CSS

  %slide.slide--dark
    .slide-content
      .middle.tac
        = image_tag 'define-shot.png', alt: 'Dribbble Shot'

  %slide
    .slide-content
      .middle.middle--auto.tsxs
        :code
          # lang: html

          <div class="shot">
            <div>
              <a href="#">
                <img src="image.jpg" alt="" />
              </a>
              <ul>
                <li>3</li>
                <li><a href="#">1</a></li>
                <li><a href="#">2</a></li>
              </ul>
            </div>
            <h2>
              <a href="#">
                <img src="user.jpg" alt="User Name" />
                User Name
              </a>
            </h2>
          </div>

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .shot          { }
          .shot div      { }
          .shot img      { }
          .shot ul       { }
          .shot ul li    { }
          .shot h2       { }
          /* ... */

  %slide.slide--warning
    .slide-content
      .middle.tac
        %h2.h4
          What happens when that <code>&lt;h2&gt;</code>
          %span.db turns into an <code>&lt;h3&gt;</code>?

  %slide.slide--warning
    .slide-content
      .middle.tac
        %ul.lr.tsxl
          %li Change the HTML
          %li Change the CSS

  %slide.slide--success
    .slide-content
      .middle.tac
        %h2 Scope it!

  %slide
    .slide-content
      .middle.middle--auto.tsxs
        :code
          # lang: html

          <div class="shot">
            <div class="shot-preview">
              <a href="#">
                <img class="shot-img" src="image.jpg" alt="" />
              </a>
              <ul class="shot-list">
                <li>3</li>
                <li><a href="#">1</a></li>
                <li><a href="#">2</a></li>
              </ul>
            </div>
            <h2 class="shot-user">
              <a href="#">
                <img src="user.jpg" alt="User Name" />
                User Name
              </a>
            </h2>
          </div>

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .shot         { }
          .shot-preview { }
          .shot-img     { }
          .shot-list    { }
          .shot-title   { }
          .shot-user    { }

  %slide.slide--warning
    .slide-content
      .middle.tac
        %h2.h4
          What if we use this <em>same pattern</em>
          %span.db for another element?

  %slide.slide--success
    .slide-content
      .middle.tac
        %h2.h3 Abstract the name!

  %slide
    .slide-content
      .middle.middle--auto.tsxs
        :code
          # lang: html

          <div class="card">
            <div class="card-preview">
              <a href="#">
                <img class="card-img" src="image.jpg" alt="" />
              </a>
              <ul class="card-list">
                <li>3</li>
                <li><a href="#">1</a></li>
                <li><a href="#">2</a></li>
              </ul>
            </div>
            <h2 class="card-user">
              <a href="#">
                <img src="user.jpg" alt="User Name" />
                User Name
              </a>
            </h2>
          </div>

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .card         { }
          .card-preview { }
          .card-img     { }
          .card-list    { }
          .card-title   { }
          .card-user    { }

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .card-list { }

  %slide
    .slide-content
      .middle.middle--auto.tsxs
        :code
          # lang: html

          <div class="card">
            <div class="card-preview">
              <a href="#">
                <img class="card-img" src="image.jpg" alt="" />
              </a>
              <ul class="list">
                <li>3</li>
                <li><a href="#">1</a></li>
                <li><a href="#">2</a></li>
              </ul>
            </div>
            <h2 class="card-user">
              <a href="#">
                <img src="user.jpg" alt="User Name" />
                User Name
              </a>
            </h2>
          </div>

  %slide
    .slide-content
      .middle.middle--auto.tsl
        :code
          # lang: css

          .card { }
          /* ... */

          .list { }

  %slide
    .slide-content
      .middle.middle--auto.tsxs
        :code
          # lang: html

          <div class="card">
            <a href="#">
              <img class="thumb thumb--m" src="image.jpg" alt="" />
            </a>
            <ul class="list">
              <li class="list-item">3</li>
              <li class="list-item"><a href="#">1</a></li>
              <li class="list-item"><a href="#">2</a></li>
            </ul>
          </div>
          <div class="bucket bucket--flag">
            <div class="bucket-media">
              <img class="thumb" src="user.jpg" alt="User Name" />
            </div>
            <div class="bucket-content">
              <h2><a href="#">User Name</a></h2>
            </div>
          </div>

  %slide
    .slide-content
      .middle.tac
        %p.tsl
          A collection of <em>independently created</em> modules that can be
          mixed and matched to create <em>multiple</em> style patterns.

  %slide
    .slide-content
      .middle.tac
        %h2.h4
          How do we find these <em>patterns</em>?

  %slide.slide--contain.slide--position--bottom.slide--title(img="#{image_path('clouds.svg')}")
    .slide-content
      .middle.tac
        %h1.mbm Process

  %slide
    .slide-content
      .middle.tac
        %h1
          %span{ style: 'font-size: 200%' } 5
          %b.tss Steps

  %slide.slide--scale
    .slide-content
      .middle.tac
        = image_tag 'process-identify.svg', alt: 'Identify', class: 'db mbm mhc', width: '20%'
        %h1.tsh2 1. Identify

  %slide
    .slide-content
      .middle.tac
        %h2.h4
          In order to <em>write</em> the pattern,
          %span.db we need to <strong class="bdrb">find</strong> the pattern.

  %slide.slide--subdue.slide--translateY
    .slide-content
      .bottom
        %h2.h1.shadowed.tci
          Structure
          %span.db &amp; Layout

  %slide= image_tag 'process-twitter-01.png', alt: 'About Twitter', width: '100%', height: '100%'
  %slide= image_tag 'process-twitter-02.png', alt: 'About Twitter', width: '100%', height: '100%'
  %slide= image_tag 'process-twitter-03.png', alt: 'About Twitter', width: '100%', height: '100%'
  %slide= image_tag 'process-twitter-04.png', alt: 'About Twitter', width: '100%', height: '100%'

  %slide
    .slide-content
      %h1.mbxs Front-end Audit
      .grid
        .grid-box.grid-box--1of2
          %ul
            %li Info
            %li Browser Support
            %li Features
            %li Tools
        .grid-box.grid-box--1of2
          %ul
            %li Icons
            %li CSS Architecture
            %li Notes &amp; Ideas
            %li Issues &amp; Log

  %slide.slide--scale
    .slide-content
      .middle.tac
        = image_tag 'process-define.svg', alt: 'Define', class: 'db mbm mhc', width: '20%'
        %h1.tsh2 2. Define

  %slide.slide--scale
    .slide-content
      .middle.tac
        = image_tag 'process-build.svg', alt: 'Build', class: 'db mbm mhc', width: '20%'
        %h1.tsh2 3. Build

  %slide.slide--scale
    .slide-content
      .middle.tac
        = image_tag 'process-combine.svg', alt: 'Combine', class: 'db mbm mhc', width: '20%'
        %h1.tsh2 4. Combine

  %slide.slide--scale
    .slide-content
      .middle.tac
        = image_tag 'process-refine.svg', alt: 'Refine', class: 'db mbm mhc', width: '20%'
        %h1.tsh2 5. Refine

