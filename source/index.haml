%slides

  %slide
    .slide-content
      .bottom
        %h1.mbf
          Thinking
          %b Modular CSS
        %p.mbf by Drew Barontini &mdash; @drewbarontini

  %slide
    .slide-content
      .middle.tac
        %h1.h4
          Learn the "why" of modular CSS by analyzing the decisions that craft
          a flexible architecture.

  %slide.slide--light
    .slide-content
      .middle.tac
        = image_tag 'me-v1.svg', alt: 'Drew Barontini Cartoon'

  %slide.slide--fade(img="#{image_path('intro-office.jpg')}")
    .slide-content
      .middle.tac
        %p.mbf.tfl.ttu Front-end Developer
        %h1.h2.mbf Code School

  %slide.slide--contain(img="#{image_path('intro-cs.png')}")

  %slide
    .slide-content
      .middle.tac
        %p.mbf.tsxl
          %strong Code School
          is an online platform for teaching web technologies.

  %slide.slide--fade(img="#{image_path('intro-cs-courses.png')}")
    .slide-content
      .middle.tac
        %h1.h3 Ruby, iOS, Design, JavaScript, Ember, Node, Angular, Dart

  %slide
    .slide-content
      .middle.tac
        %h1 Responsibilities

  %slide
    .slide-content
      .middle.tac
        %ul.lr.mbf.tsxl
          %li Front-end for the .com
          %li Our course engine
          %li Buildout of individual courses

  %slide.slide--fade.slide--fade--light(img="#{image_path('journey-journey.jpg')}")
    .slide-content
      .middle.tac
        %h1.mbf The Journey

  %slide.slide--contain.slide--dark(img="#{image_path('journey-band.jpg')}")

  %slide.slide--fade.slide--fade--light(img="#{image_path('journey-jt.png')}")
    .slide-content
      .middle.tac
        %h1 MySpace?

  %slide.slide--contain.slide--light(img="#{image_path('journey-tshirt.png')}")

  %slide.slide--fade.slide--fade--dark(img="#{image_path('journey-cs.jpg')}")
    .slide-content
      .middle.tac
        %h1 Computer Science

  %slide.slide--success
    .slide-content
      .middle.tac
        %h1 Front-end Development

  %slide
    .slide-content
      .middle.tac
        %h2 It's a specialization.

  %slide(img="#{image_path('what-jesse.gif')}")

  %slide
    .slide-content
      .middle.tac
        %h1.h3 Front-end Developer &amp; Designer

  %slide
    .slide-content
      .middle.tac
        %h1.h3
          Front-end Developer
          %span.tds &amp; Designer

  %slide(img="#{image_path('journey-excited.gif')}")

  %slide.slide--warning
    .slide-content
      .middle.tac
        %h1.h3.mbf Developers Respect Our CSS
        %p.mbf.tsl (mostly)

  %slide.slide--success
    .slide-content
      .middle.tac
        %h1.h3.mbf
          HTML/CSS are easy to write,
          %b but hard to write well.

  %slide
    .slide-content
      .middle.tac
        %h1.h3.mbf
          We're building complex
          %b systems now.

  %slide
    .slide-content
      .middle.tac
        %h1.h3.mbf
          Markup and styles
          %b working in unison.

  %slide
    .slide-content
      .middle.tac
        %h1.h3.mbf
          Ability for styles to flex and work in different environments.

  %slide.slide--dark
    .slide-content
      .middle.tac
        %h1.h2 Define "Modular CSS"

  %slide
    .slide-content
      .middle
        %blockquote
          "Modular design is an approach that subdivides a system into smaller
          parts that can be independently created and then used in different
          systems to drive multiple functionalities."

  %slide
    .slide-content
      .middle.tac
        %h1 tl;dr
        %ul.lr.tsl
          %li Smaller parts
          %li Independently created
          %li Used in different systems

  %slide
    .slide-content
      .middle.tac
        %h1.mbf Separation of Concerns

  %slide
    .slide-content
      .middle
        %blockquote
          "Separation of concerns is a design principle for separating a
          computer program into distinct sections, such that each section
          addresses a separate concern."

  %slide.slide--success
    .slide-content
      .middle.tac
        %h1.h3.mbf
          Breaking your CSS down into smaller chunks will ultimately result in
          more maintainable code.

  %slide.slide--light
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .thumb {
              border-radius: 50%;
              display: block;
            }

  %slide
    .slide-content
      .middle.tac
        %h1.h2.mbf
          A <em>small</em> set of styles that is easily extendable.

  %slide
    .slide-content
      .middle.tac
        %h1.mbf Single Responsibility Principle

  %slide
    .slide-content
      .middle
        %blockquote
          "The single responsibility principle states that every class should
          have a single responsibility, and that responsibility should be
          entirely encapsulated by the class."

  %slide.slide--light
    .slide-content
      .middle.middle--auto
        - code('css') do
          :plain
            .list {
              list-style-type: none;
              margin: 0;
              padding: 0;
            }

            .list-item {
              display: block;
              margin-bottom: 1em;
            }
            .list-item:last-child {
              margin-bottom: 0;
            }

  %slide
    .slide-content
      .middle.tac
        %h1.h2.mbf
          A list module that <em>only</em> handles text lists.

  %slide
    .slide-content
      .middle.tac
        %h1.h3.mbf
          "...<em>encapsulated</em> by the class."

  %slide.slide--light
    .slide-content
      .middle.middle--auto.tsl
        - code('css') do
          :plain
            .header-item {
              transform: translateY(-50%);
              position: relative;
              top: 50%;
            }

  %slide.slide--light
    .slide-content
      .middle.middle--auto
        - code('html') do
          :plain
            <header class="header">
              <nav class="header-item">
                <ul class="list">
                  <li class="list-item"><a href="/">Home</a></li>
                  <li class="list-item"><a href="/about">About</a></li>
                  <li class="list-item"><a href="/contact">Contact</a></li>
                </ul>
              </nav>
            </header>
